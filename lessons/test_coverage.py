"""В проекте имеются три функции по работе с массивами: get(), index_of() и my_slice(). Программист, работавший на этом проекте до вас, недостаточно ответственно отнесся к написанию тестов. Вам нужно исправить этот недочет и дописать недостающие тесты.

Выполните в терминале команду make test-coverage и сгенерируйте отчет по покрытию кода тестами.
Изучите статистику и допишите тесты на те функции, которые не достаточно покрыты тестами.
Допишите необходимые тесты на функции get(), index_of() и my_slice(). Функции работают следующим образом:

Функция get(list, index, default = None) извлекает из списка значение по указанному индексу, если индекс существует. Если индекс не существует, возвращает значение по умолчанию.
Пример работы функции:

>>> numbers = [1, 2, 3, 4]
>>> get(numbers, 1)
2
>>> get(numbers, 5, 'nothing')
'nothing'
>>> get(numbers, 5)
>>>
Функция index_of(list, value, from_index) возвращает первый индекс, по которому переданное значение может быть найдено в списке или -1, если такого значения нет.
Аргументы:

list - список, в котором ведется поиск.
value - значение, поиск которого ведется в массиве .
from_index - индекс, с которого начинается поиск элемента, по умолчанию равен нулю. Если значение from_index отрицательное, то оно используется, как смещение с конца массива.
Пример работы функции:

>>> numbers = [1, 2, 3, 2, 5]
>>> index_of(numbers, 2)
1
>>> index_of(numbers, 7)
-1
>>> index_of(numbers, 2, -3)
3
Функция my_slice(arr, begin, end) возвращает новый список, содержащий копию части исходного списка.
Аргументы:

list - исходный список.
begin - индекс, по которому начинается извлечение. Если индекс отрицательный, begin указывает смещение от конца списка. По умолчанию равен нулю.
end - индекс, по которому заканчивается извлечение (не включая элемент с индексом end). Если индекс отрицательный, end указывает смещение от конца списка. По умолчанию равен длине исходного списка.
Пример работы функции:

>>> numbers = [1, 2, 3, 4, 5]
>>> my_slice(numbers)
[1, 2, 3, 4, 5]
>>> my_slice(numbers, 1, 4)
[2, 3, 4]
>>> my_slice(numbers, -4, -2)
[2, 3]
>>> my_slice(numbers, 7)
[]
Подсказки
Тестирование будет считаться успешным, если на неправильных вариантах функций "упадут" все три теста. Если хотя бы один из трех тестов пройдет, это означает что покрытие функции соответствующим тестом недостаточное. В таком случае решение засчитано не будет."""

from functions_coverage import get_functions

func = get_functions()
get = func["get"]
index_of = func["index_of"]
my_slice = func["slice"]


def test_get():
    assert get([1, 2, 3], 1, "a") == 2
    assert get([4, 5, 6], 7, "val") == "val"
    assert get([7, 8, 9], 4) is None
    # BEGIN
    # Функция полностью покрыта тестами
    # END


def test_index_of():
    assert index_of([2, 7, 3, 2, 4], 2) == 0
    # BEGIN
    assert index_of([], 0) == -1
    assert index_of([1, 2, 3, 2, 4], 2, -3) == 3
    assert index_of([1, 2, 2], 2, -10) == 1
    assert index_of([1, 2, 3], 4) == -1
    # END


def test_slice():
    assert my_slice([1, 2, 3, 4, 5, 6], 1, 4) == [2, 3, 4]
    # BEGIN
    assert my_slice([]) == []
    assert my_slice([1, 2, 3, 4, 5, 6], -4, -2) == [3, 4]
    assert my_slice([1, 2, 3, 4], -10, 10) == [1, 2, 3, 4]
    # END